{
	"$schema": "http://json-schema.org/draft-04/schema#",
	"title": "json schema for manifest.webpackage",
	"type": "object",
	"properties": {
		"name": {
			"description": "The name of the webpackage.",
			"type": "string",
			"pattern": "^([a-z][a-z0-9]*)([a-z\\-]*(([0-9])+([0-9\\.]+)*([0-9])+)*)*([a-z0-9]*)$"
		},
		"groupId": {
			"description": "Use this to define/select a namespace for the webpackage (e.g. org.example).",
			"type": "string",
			"pattern": "^([a-z0-9]+||([a-z0-9]+[a-z0-9-][a-z0-9]+)*)(\\.([a-z0-9]+||([a-z0-9]+[a-z0-9-][a-z0-9]+)*))*$"
		},
		"version": {
			"description": "Version number of the webpackage.",
			"type": "string",
			"pattern": "^(\\d+)(\\.[\\d]+)*(-SNAPSHOT)?$"
		},
		"modelVersion": {
			"description": "Version of the webpackage specification.",
			"type": "string",
			"enum": [
				"9.1.0"
			]
		},
		"docType": {
			"description": "Type of this document (must be 'webpackage').",
			"type": "string",
			"enum": [
				"webpackage"
			]
		},
		"description": {
			"description": "A short description of the webpackage.",
			"type": "string"
		},
		"author": {
			"type": "object",
			"description": "The author of this webpackage.",
			"$ref": "#/definitions/person"
		},
		"contributors": {
			"description": "A list of contributors of this webpackage.",
			"type": "array",
			"minItems": 0,
			"items": {
				"$ref": "#/definitions/person"
			}
		},
		"license": {
			"description": "License name. Recommended values see https://spdx.org/licenses/.",
			"type": "string"
		},
		"homepage": {
			"description": "The url of the webpackage related website.",
			"type": "string",
			"pattern": "^(https?)://[^\\s\\/$.?#].[^\\s]*$"
		},
		"keywords": {
			"description": "Keywords which support other developers to find this webpackage.",
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"man": {
			"description": "1..n urls to external manual(s) related to this webpackage.",
			"oneOf": [
				{
					"type": "string",
					"pattern": "^(https?)://[^\\s\\/$.?#].[^\\s]*$"
				},
				{
					"type": "array",
					"items": {
						"type": "string",
						"pattern": "^(https?)://[^\\s\\/$.?#].[^\\s]*$"
					}
				}
			]
		},
		"runnables": {
			"description": "Resources that are actually runnable in a users webbrowser.",
			"type": "array",
			"minItems": 0,
			"items": {
				"$ref": "#/definitions/runnable"
			}
		},
		"artifacts": {
			"description": "Artifacts represent independent parts of a webpackage - with an enclosed responsibility and usable as a dependency of other artifacts.",
			"type": "object",
			"properties": {
				"apps": {
					"description": "refer to 0..n apps within your webpackage",
					"type": "array",
					"minItems": 0,
					"items": {
						"$ref": "#/definitions/appArtifact"
					}
				},
				"compoundComponents": {
					"description": "refer to 0..n compounds within your webpackage",
					"type": "array",
					"minItems": 0,
					"items": {
						"$ref": "#/definitions/compoundArtifact"
					}
				},
				"elementaryComponents": {
					"description": "refer to 0..n elementaries within your webpackage",
					"type": "array",
					"minItems": 0,
					"items": {
						"$ref": "#/definitions/elementaryArtifact"
					}
				},
				"utilities": {
					"description": "refer to 0..n utilities within your webpackage",
					"type": "array",
					"minItems": 0,
					"items": {
						"$ref": "#/definitions/utilArtifact"
					}
				}
			},
			"additionalProperties": false
		}
	},
	"required": [
		"name",
		"groupId",
		"version",
		"modelVersion",
		"docType",
		"author",
		"license",
		"artifacts"
	],
	"additionalProperties": false,
	"definitions": {
		"person": {
			"type": "object",
			"properties": {
				"name": {
					"description": "a persons name",
					"type": "string",
					"pattern": "^(([A-Za-zäöüÄÖÜ]+[\\-\\']?)*([A-Za-zäöüÄÖÜ]+)?[\\.]?\\s)+([A-Za-zäöüÄÖÜ]+[\\-\\']?)*([A-Za-zäöüÄÖÜ]+)?$"
				},
				"email": {
					"description": "email address",
					"type": "string",
					"pattern": "^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$"
				},
				"url": {
					"description": "url of a person (e.g. the personal homepage)",
					"type": "string",
					"pattern": "^(https?)://[^\\s\\/$.?#].[^\\s]*$"
				}
			},
			"required": [
				"name",
				"email"
			]
		},
		"runnable": {
			"type": "object",
			"properties": {
				"name": {
					"description": "A (short) name for the runnable.",
					"type": "string",
					"pattern": "^(.)+$"
				},
				"path": {
					"description": "Path to the 'runnable' resource - relative to the webpackage itself (e.g. '/doc/index.html').",
					"type": "string",
					"pattern": "^/(.)+$"
				},
				"description": {
					"description": "Short description of the runnable: short content description, target group etc.",
					"type": "string"
				}
			},
			"required": [
				"name",
				"path"
			]
		},
		"appArtifact": {
			"type": "object",
			"properties": {
				"runnables": {
					"description": "Resources that are actually runnable in a users webbrowser.",
					"type": "array",
					"minItems": 0,
					"items": {
						"$ref": "#/definitions/runnable"
					}
				},
				"artifactId": {
					"description": "a name of this artifact - unique within the webpackage.",
					"type": "string",
					"pattern": "^[a-z0-9-]+$"
				},
				"resources": {
					"description": "Contains the first-level resources of this artifact.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/resourceItem"
					}
				},
				"dependencies": {
					"description": "0..n other artifacts this artifact needs to work properly. For the sake of backwards compatibility down to model version 8 you can reference endpoints as well. Note: 'webpackage': 'this' refers artifact(s) of the this webpackage.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/dependencyItem"
					}
				},
				"dependencyExcludes": {
					"description": "0..n artifacts,which will be  excluded the dependency from dependency tree. The defined dependency will  excluded from the dependency tree of this artifact.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/dependencyItem"
					}
				},
				"description": {
					"description": "Description of this artifact: responsibility, usage scenarios.",
					"type": "string"
				}
			},
			"required": [
				"runnables",
				"artifactId"
			],
			"additionalProperties": false
		},
		"compoundArtifact": {
			"type": "object",
			"properties": {
				"artifactId": {
					"description": "a name of this artifact - unique within the webpackage.",
					"type": "string",
					"pattern": "^[a-z0-9]+(-[a-z0-9]+)+$"
				},
				"description": {
					"description": "Description of this artifact: responsibility, usage scenarios.",
					"type": "string"
				},
				"runnables": {
					"description": "Resources that are actually runnable in a users webbrowser.",
					"type": "array",
					"minItems": 0,
					"items": {
						"$ref": "#/definitions/runnable"
					}
				},
				"resources": {
					"description": "Contains the first-level resources of this artifact.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/resourceItem"
					}
				},
				"dependencies": {
					"description": "0..n other artifacts this artifact needs to work properly. Note: 'webpackage': 'this' refers artifact(s) of the this webpackage.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/dependencyItem"
					}
				},
				"dependencyExcludes": {
					"description": "0..n artifacts,which will be  excluded the dependency from dependency tree. The defined dependency will  excluded from the dependency tree of this artifact.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/dependencyItem"
					}
				},
				"slots": {
					"description": "1..n slots to exchange data with other elementaries or compounds.",
					"type": "array",
					"minItems": 0,
					"items": {
						"$ref": "#/definitions/compoundArtifactSlotItem"
					}
				},
				"members": {
					"description": "Referenced components (elementaries or compounds) acting as members of this compound component.",
					"type": "array",
					"minItems": 0,
					"items": {
						"$ref": "#/definitions/compoundArtifactMemberItem"
					}
				},
				"connections": {
					"description": "List of designed connection between the members and between members and this compound component.",
					"type": "array",
					"minItems": 0,
					"items": {
						"$ref": "#/definitions/compoundArtifactConnectionItem"
					}
				},
				"inits": {
					"description": "List of slot initializations of the compound and member component(s).",
					"type": "array",
					"items": {
						"$ref": "#/definitions/compoundArtifactInitItem"
					}
				}
			},
			"required": [
				"artifactId",
				"resources",
				"members",
				"connections"
			],
			"additionalProperties": false
		},
		"compoundArtifactSlotItem": {
			"type": "object",
			"properties": {
				"slotId": {
					"description": "Identifier for this slot item - unique within this component.",
					"type": "string",
					"pattern": "^[a-z][a-zA-Z0-9-]*$"
				},
				"type": {
					"description": "Data type of the slot.",
					"type": "string",
					"enum": [
						"boolean",
						"string",
						"number",
						"object",
						"array"
					]
				},
				"direction": {
					"description": "A slot can be public accessible as input-slot (receive data), output-slot (propagate data) or both. If this attribute not exist, is the slot bidirectional",
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string",
						"enum": [
							"input",
							"output"
						]
					}
				},
				"description": {
					"description": "Description of this slot: responsibility, expected data-structure etc.",
					"type": "string"
				}
			},
			"required": [
				"slotId",
				"type"
			]
		},
		"compoundArtifactMemberItem": {
			"type": "object",
			"properties": {
				"memberId": {
					"description": "Identifier for this member item - unique within this compound component.",
					"type": "string",
					"pattern": "^[a-z][a-zA-Z0-9-]*$"
				},
				"artifactId": {
					"description": "Id of the artifact for this member item (e.g. 'artifact-1')",
					"type": "string",
					"pattern": "^[a-z0-9-]+$"
				},
				"displayName": {
					"description": "Display name of the referenced member for design view of the BDE",
					"type": "string",
					"minLength": 1
				},
				"description": {
					"description": "Description of this member: responsibility, usage notes etc.",
					"type": "string"
				}
			},
			"required": [
				"memberId",
				"artifactId"
			],
			"additionalProperties": false
		},
		"compoundArtifactConnectionItem": {
			"description": "Definition of a connection.",
			"type": "object",
			"properties": {
				"connectionId": {
					"description": "Identifier for this connection item - unique within this compound component.",
					"type": "string",
					"pattern": "^[a-z][a-zA-Z0-9-:]*$"
				},
				"source": {
					"$ref": "#/definitions/connectionEndpoint"
				},
				"destination": {
					"$ref": "#/definitions/connectionEndpoint"
				},
				"copyValue": {
					"description": "Indicate to copy or not to copy the payload (inc case the payload is an object). true: make a copy, false: do not make a copy - pass by reference. (default == true)",
					"type": "boolean"
				},
				"repeatedValues": {
					"description": "If repeatedValues is true, the same value consecutively will propagated, otherwise not. The default value is false.",
					"type": "boolean"
				},
				"hookFunction": {
					"description": "A function declaration as a string or a global function name. This function will called, before a connection destination model variable setted.",
					"type": "string"
				},
				"description": {
					"description": "A short description of this connection: responsibility etc.",
					"type": "string"
				}
			},
			"required": [
				"connectionId",
				"source",
				"destination"
			],
			"additionalProperties": false
		},
		"connectionEndpoint": {
			"description": "Describes a source or target -endpoint of a connection.",
			"type": "object",
			"properties": {
				"memberIdRef": {
					"description": "The 'memberId' value of the member item, the slot belongs to. If the memberIdRef property is missed, it will connected with an own slot of the compound component.",
					"type": "string",
					"pattern": "^[a-z][a-zA-Z0-9-]*$"
				},
				"slot": {
					"description": "The name of the slot.",
					"type": "string"
				}
			},
			"required": [
				"slot"
			],
			"additionalProperties": false
		},
		"compoundArtifactInitItem": {
			"type": "object",
			"properties": {
				"memberIdRef": {
					"description": "The 'memberId' value of the member item, the slot belongs to. If the property is missed, it refers to an own slot of the compound component.",
					"type": "string",
					"pattern": "^[a-z][a-zA-Z0-9-]*$"
				},
				"slot": {
					"description": "Name of the slot to be initialized.",
					"type": "string"
				},
				"value": {
					"description": "The value to init the slot with.",
					"type": [
						"object",
						"array",
						"string",
						"number",
						"boolean"
					]
				},
				"description": {
					"description": "A short description of this init item: responsibility etc.",
					"type": "string"
				}
			},
			"required": [
				"slot"
			],
			"additionalProperties": false
		},
		"elementaryArtifact": {
			"type": "object",
			"properties": {
				"artifactId": {
					"description": "a name of this artifact - unique within the webpackage.",
					"type": "string",
					"pattern": "^[a-z0-9]+(-[a-z0-9]+)+$"
				},
				"description": {
					"description": "Description of this artifact: responsibility, usage scenarios.",
					"type": "string"
				},
				"runnables": {
					"description": "Resources that are actually runnable in a users webbrowser.",
					"type": "array",
					"minItems": 0,
					"items": {
						"$ref": "#/definitions/runnable"
					}
				},
				"resources": {
					"description": "Contains the first-level resources of this artifact.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/resourceItem"
					}
				},
				"dependencies": {
					"description": "0..n other artifacts this artifact needs to work properly. For the sake of backwards compatibility down to model version 8 you can reference endpoints as well. Note: 'webpackage': 'this' refers artifact(s) of the this webpackage.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/dependencyItem"
					}
				},
				"dependencyExcludes": {
					"description": "0..n artifacts,which will be  excluded the dependency from dependency tree. The defined dependency will  excluded from the dependency tree of this artifact.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/dependencyItem"
					}
				},
				"slots": {
					"description": "1..n slots to exchange data with other elementaries or compounds.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/elementaryArtifactSlotItem"
					},
					"additionalProperties": false
				}
			},
			"required": [
				"artifactId",
				"resources"
			],
			"additionalProperties": false
		},
		"elementaryArtifactSlotItem": {
			"type": "object",
			"properties": {
				"slotId": {
					"description": "Identifier for this slot item - unique within this component.",
					"type": "string",
					"pattern": "^[a-z][a-zA-Z0-9-]*$"
				},
				"type": {
					"description": "Data type of the slot.",
					"type": "string",
					"enum": [
						"boolean",
						"string",
						"number",
						"object",
						"array"
					]
				},
				"direction": {
					"description": "A slot can be public accessible as input-slot (receive data), output-slot (propagate data) or both. If this attribute does not exist, the slot is bidirectional",
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string",
						"enum": [
							"input",
							"output"
						]
					}
				},
				"value": {
					"description": "Default value for the slot.",
					"type": [
						"object",
						"array",
						"string",
						"number",
						"boolean"
					]
				},
				"description": {
					"description": "description of this slot: responsibility, expected data-structure etc.",
					"type": "string"
				}
			},
			"required": [
				"slotId",
				"type"
			]
		},
		"utilArtifact": {
			"type": "object",
			"properties": {
				"artifactId": {
					"description": "a name of this artifact - unique within the webpackage.",
					"type": "string",
					"pattern": "^[a-z0-9-]+$"
				},
				"runnables": {
					"description": "Resources that are actually runnable in a users webbrowser.",
					"type": "array",
					"minItems": 0,
					"items": {
						"$ref": "#/definitions/runnable"
					}
				},
				"description": {
					"description": "Description of this artifact: responsibility, usage scenarios.",
					"type": "string"
				},
				"resources": {
					"description": "Contains the first-level resources of this artifact.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/resourceItem"
					}
				},
				"dependencies": {
					"description": "0..n other artifacts this artifact needs to work properly. For the sake of backwards compatibility down to model version 8 you can reference endpoints as well. Note: 'webpackage': 'this' refers artifact(s) of the this webpackage.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/dependencyItem"
					}
				},
        "dependencyExcludes": {
          "description": "0..n artifacts,which will be  excluded the dependency from dependency tree. The defined dependency will  excluded from the dependency tree of this artifact.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dependencyItem"
          }
        }
			},
			"required": [
				"artifactId",
				"resources"
			],
			"additionalProperties": false
		},
		"artifactEndpointItem": {
			"type": "object",
			"properties": {
				"endpointId": {
					"description": "Identifier for this slot item - unique within this component.",
					"type": "string",
					"pattern": "^[a-z0-9-]+$"
				},
				"description": {
					"description": "Description of this endpoint: What does the endpoint provide? When to use? etc.",
					"type": "string"
				},
				"resources": {
					"description": "Contains the first-level resources of this endpoint.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/resourceItem"
					}
				},
				"dependencies": {
					"description": "0..n other artifacts-endpoints this artifact-endpoint needs to work properly. Note: 'webpackage': 'this' refers artifact(s) of the this webpackage.",
					"type": "array",
					"items": {
						"type": "string",
						"pattern": "^[a-z0-9-@\\.]+(-SNAPSHOT)?\\/[a-z0-9-]+\\/[a-z0-9-]+$"
					}
				}
			},
			"required": [
				"endpointId",
				"resources"
			],
			"additionalProperties": false
		},
		"resourceItem": {
			"type": [
				"object",
				"string"
			],
			"anyOf": [
				{
					"$ref": "#/definitions/resourceObject"
				},
				{
					"$ref": "#/definitions/resourceString"
				}
			]
		},
		"resourceObject": {
			"description": "Resource definition, separated for runtimeMode \"prod\" and \"dev\".",
			"type": "object",
			"properties": {
				"prod": {
					"description": "Path to potentially optimized resource.",
					"type": "string"
				},
				"dev": {
					"description": "Path to resource for development.",
					"type": "string"
				}
			},
			"required": [
				"prod",
				"dev"
			],
			"additionalProperties": false
		},
		"resourceString": {
			"description": "Path to resource. This resource will be used for both runtimeMode \"prod\" and \"dev\".",
			"type": "string"
		},
		"dependencyItem": {
			"description": "A dependency definition.",
			"type": "object",
			"properties": {
				"artifactId": {
					"description": "The artifact id of the dpendency.",
					"type": "string",
					"pattern": "^[a-z0-9-]+$"
				},
				"webpackageId": {
					"description": "The webpackagId of the dependency. This property is optional. Absent webpacakgeId implies, that the dependency is in the current webpackage.",
					"type": "string",
					"pattern": "^([a-z0-9]+||([a-z0-9]+[a-z0-9-][a-z0-9]+)*)(\\.([a-z0-9]+||([a-z0-9]+[a-z0-9-][a-z0-9]+)*))*[@](\\d+)(\\.[\\d]+)*(-SNAPSHOT)?$"
				},
				"endpointId": {
					"description": "THe endpointId of the dependency. This property should be used only for dependencies with modelVersion < 9.0.",
					"type": "string",
					"pattern": "^[a-zA-z][a-zA-z1-9-]*$"
				}
			},
			"required": [
				"artifactId"
			],
			"additionalProperties": false,
			"anyOf": [
				{}
			]
		}
	}
}